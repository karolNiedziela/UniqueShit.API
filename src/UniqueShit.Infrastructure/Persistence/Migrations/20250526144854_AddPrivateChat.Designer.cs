// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using UniqueShit.Infrastructure.Persistence;

#nullable disable

namespace UniqueShit.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(UniqueShitDbContext))]
    [Migration("20250526144854_AddPrivateChat")]
    partial class AddPrivateChat
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SaleOfferColour", b =>
                {
                    b.Property<int>("ColourId")
                        .HasColumnType("int");

                    b.Property<int>("SaleOfferId")
                        .HasColumnType("int");

                    b.HasKey("ColourId", "SaleOfferId");

                    b.HasIndex("SaleOfferId");

                    b.ToTable("SaleOfferColour");
                });

            modelBuilder.Entity("UniqueShit.Chatting.ChatMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<Guid>("PrivateChatId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SenderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("SentAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("PrivateChatId");

                    b.HasIndex("SenderId");

                    b.ToTable("ChatMessage");
                });

            modelBuilder.Entity("UniqueShit.Domain.Chatting.PrivateChat", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("User1Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("User2Id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("User1Id");

                    b.HasIndex("User2Id");

                    b.ToTable("PrivateChat");
                });

            modelBuilder.Entity("UniqueShit.Domain.Enitities.AppUser", b =>
                {
                    b.Property<Guid>("ADObjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.HasKey("ADObjectId");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("ADObjectId"), false);

                    b.HasIndex("ADObjectId");

                    b.HasIndex("Id");

                    SqlServerIndexBuilderExtensions.IsClustered(b.HasIndex("Id"));

                    b.ToTable("AppUser");
                });

            modelBuilder.Entity("UniqueShit.Domain.Enitities.Brand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("Brand");
                });

            modelBuilder.Entity("UniqueShit.Domain.Enitities.Model", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid?>("AppUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("BrandId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("ProductCategoryId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("BrandId");

                    b.HasIndex("ProductCategoryId");

                    b.ToTable("Model");
                });

            modelBuilder.Entity("UniqueShit.Domain.Enitities.Size", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ProductCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("ProductCategoryId");

                    b.ToTable("Size");
                });

            modelBuilder.Entity("UniqueShit.Domain.Enumerations.Colour", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("Colour");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Black"
                        },
                        new
                        {
                            Id = 2,
                            Name = "White"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Red"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Blue"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Green"
                        });
                });

            modelBuilder.Entity("UniqueShit.Domain.Enumerations.ItemCondition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("ItemCondition");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "New"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Used"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Damaged"
                        });
                });

            modelBuilder.Entity("UniqueShit.Domain.Enumerations.ProductCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("ProductCategory");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Shoes"
                        },
                        new
                        {
                            Id = 2,
                            Name = "T-shirts"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Hoodies"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Caps"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Socks"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Jackets"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Tracksuits"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Trousers"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Underwear"
                        });
                });

            modelBuilder.Entity("UniqueShit.Domain.FavouriteOffers.FavouriteOffer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid>("AppUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<int>("SaleOfferId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("SaleOfferId");

                    b.ToTable("FavouriteOffer");
                });

            modelBuilder.Entity("UniqueShit.Domain.Offers.Enumerations.DeliveryType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("DeliveryType");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Meeting"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Shipping"
                        },
                        new
                        {
                            Id = 99,
                            Name = "Any"
                        });
                });

            modelBuilder.Entity("UniqueShit.Domain.Offers.Enumerations.OfferState", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("OfferState");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Active"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Expired"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Completed"
                        });
                });

            modelBuilder.Entity("UniqueShit.Domain.Offers.Enumerations.PaymentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("PaymentType");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Bank transfer"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Cash"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Blik"
                        },
                        new
                        {
                            Id = 99,
                            Name = "Any"
                        });
                });

            modelBuilder.Entity("UniqueShit.Domain.Offers.PurchaseOffer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid>("AppUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpiredAtUtc")
                        .HasColumnType("datetime2");

                    b.Property<int>("ModelId")
                        .HasColumnType("int");

                    b.Property<int>("OfferStateId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("ModelId");

                    b.HasIndex("OfferStateId");

                    b.ToTable("PurchaseOffer");
                });

            modelBuilder.Entity("UniqueShit.Domain.Offers.SaleOffer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid>("AppUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<int>("DeliveryTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ExpiredAtUtc")
                        .HasColumnType("datetime2");

                    b.Property<int>("ItemConditionId")
                        .HasColumnType("int");

                    b.Property<int>("ModelId")
                        .HasColumnType("int");

                    b.Property<int>("OfferStateId")
                        .HasColumnType("int");

                    b.Property<int>("PaymentTypeId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("SizeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("DeliveryTypeId");

                    b.HasIndex("ItemConditionId");

                    b.HasIndex("ModelId");

                    b.HasIndex("OfferStateId");

                    b.HasIndex("PaymentTypeId");

                    b.HasIndex("SizeId");

                    b.ToTable("SaleOffer");
                });

            modelBuilder.Entity("SaleOfferColour", b =>
                {
                    b.HasOne("UniqueShit.Domain.Enumerations.Colour", null)
                        .WithMany()
                        .HasForeignKey("ColourId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UniqueShit.Domain.Offers.SaleOffer", null)
                        .WithMany()
                        .HasForeignKey("SaleOfferId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("UniqueShit.Chatting.ChatMessage", b =>
                {
                    b.HasOne("UniqueShit.Domain.Chatting.PrivateChat", "PrivateChat")
                        .WithMany("Messages")
                        .HasForeignKey("PrivateChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UniqueShit.Domain.Enitities.AppUser", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PrivateChat");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("UniqueShit.Domain.Chatting.PrivateChat", b =>
                {
                    b.HasOne("UniqueShit.Domain.Enitities.AppUser", "User1")
                        .WithMany()
                        .HasForeignKey("User1Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("UniqueShit.Domain.Enitities.AppUser", "User2")
                        .WithMany()
                        .HasForeignKey("User2Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User1");

                    b.Navigation("User2");
                });

            modelBuilder.Entity("UniqueShit.Domain.Enitities.Model", b =>
                {
                    b.HasOne("UniqueShit.Domain.Enitities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("AppUserId");

                    b.HasOne("UniqueShit.Domain.Enitities.Brand", "Brand")
                        .WithMany()
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UniqueShit.Domain.Enumerations.ProductCategory", "ProductCategory")
                        .WithMany()
                        .HasForeignKey("ProductCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");

                    b.Navigation("ProductCategory");
                });

            modelBuilder.Entity("UniqueShit.Domain.Enitities.Size", b =>
                {
                    b.HasOne("UniqueShit.Domain.Enumerations.ProductCategory", null)
                        .WithMany()
                        .HasForeignKey("ProductCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("UniqueShit.Domain.FavouriteOffers.FavouriteOffer", b =>
                {
                    b.HasOne("UniqueShit.Domain.Enitities.AppUser", "AppUser")
                        .WithMany()
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UniqueShit.Domain.Offers.SaleOffer", "SaleOffer")
                        .WithMany()
                        .HasForeignKey("SaleOfferId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("SaleOffer");
                });

            modelBuilder.Entity("UniqueShit.Domain.Offers.PurchaseOffer", b =>
                {
                    b.HasOne("UniqueShit.Domain.Enitities.AppUser", "AppUser")
                        .WithMany()
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("UniqueShit.Domain.Enitities.Model", "Model")
                        .WithMany()
                        .HasForeignKey("ModelId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("UniqueShit.Domain.Offers.Enumerations.OfferState", null)
                        .WithMany()
                        .HasForeignKey("OfferStateId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.OwnsOne("UniqueShit.Domain.Offers.ValueObjects.Description", "Description", b1 =>
                        {
                            b1.Property<int>("PurchaseOfferId")
                                .HasColumnType("int");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(200)
                                .HasColumnType("nvarchar(200)")
                                .HasColumnName("Description");

                            b1.HasKey("PurchaseOfferId");

                            b1.ToTable("PurchaseOffer");

                            b1.WithOwner()
                                .HasForeignKey("PurchaseOfferId");
                        });

                    b.OwnsOne("UniqueShit.Domain.Offers.ValueObjects.Topic", "Topic", b1 =>
                        {
                            b1.Property<int>("PurchaseOfferId")
                                .HasColumnType("int");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(30)
                                .HasColumnType("nvarchar(30)")
                                .HasColumnName("Topic");

                            b1.HasKey("PurchaseOfferId");

                            b1.ToTable("PurchaseOffer");

                            b1.WithOwner()
                                .HasForeignKey("PurchaseOfferId");
                        });

                    b.Navigation("AppUser");

                    b.Navigation("Description")
                        .IsRequired();

                    b.Navigation("Model");

                    b.Navigation("Topic")
                        .IsRequired();
                });

            modelBuilder.Entity("UniqueShit.Domain.Offers.SaleOffer", b =>
                {
                    b.HasOne("UniqueShit.Domain.Enitities.AppUser", "AppUser")
                        .WithMany()
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("UniqueShit.Domain.Offers.Enumerations.DeliveryType", null)
                        .WithMany()
                        .HasForeignKey("DeliveryTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("UniqueShit.Domain.Enumerations.ItemCondition", null)
                        .WithMany()
                        .HasForeignKey("ItemConditionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("UniqueShit.Domain.Enitities.Model", "Model")
                        .WithMany()
                        .HasForeignKey("ModelId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("UniqueShit.Domain.Offers.Enumerations.OfferState", null)
                        .WithMany()
                        .HasForeignKey("OfferStateId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("UniqueShit.Domain.Offers.Enumerations.PaymentType", null)
                        .WithMany()
                        .HasForeignKey("PaymentTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("UniqueShit.Domain.Enitities.Size", "Size")
                        .WithMany()
                        .HasForeignKey("SizeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.OwnsOne("UniqueShit.Domain.Offers.ValueObjects.Description", "Description", b1 =>
                        {
                            b1.Property<int>("SaleOfferId")
                                .HasColumnType("int");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(200)
                                .HasColumnType("nvarchar(200)")
                                .HasColumnName("Description");

                            b1.HasKey("SaleOfferId");

                            b1.ToTable("SaleOffer");

                            b1.WithOwner()
                                .HasForeignKey("SaleOfferId");
                        });

                    b.OwnsOne("UniqueShit.Domain.Offers.ValueObjects.Topic", "Topic", b1 =>
                        {
                            b1.Property<int>("SaleOfferId")
                                .HasColumnType("int");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(30)
                                .HasColumnType("nvarchar(30)")
                                .HasColumnName("Topic");

                            b1.HasKey("SaleOfferId");

                            b1.ToTable("SaleOffer");

                            b1.WithOwner()
                                .HasForeignKey("SaleOfferId");
                        });

                    b.OwnsOne("UniqueShit.Domain.Offers.ValueObjects.Money", "Price", b1 =>
                        {
                            b1.Property<int>("SaleOfferId")
                                .HasColumnType("int");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("decimal(6,2)")
                                .HasColumnName("Price");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasMaxLength(3)
                                .HasColumnType("nvarchar(3)")
                                .HasColumnName("Currency");

                            b1.HasKey("SaleOfferId");

                            b1.ToTable("SaleOffer");

                            b1.WithOwner()
                                .HasForeignKey("SaleOfferId");
                        });

                    b.Navigation("AppUser");

                    b.Navigation("Description")
                        .IsRequired();

                    b.Navigation("Model");

                    b.Navigation("Price")
                        .IsRequired();

                    b.Navigation("Size");

                    b.Navigation("Topic")
                        .IsRequired();
                });

            modelBuilder.Entity("UniqueShit.Domain.Chatting.PrivateChat", b =>
                {
                    b.Navigation("Messages");
                });
#pragma warning restore 612, 618
        }
    }
}
